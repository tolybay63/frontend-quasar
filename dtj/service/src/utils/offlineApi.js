/**
 * –ü—Ä–æ—Å—Ç–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
 */
class OfflineAPI {
  constructor() {
    this.pending = this.loadPending();
    this.isOnline = navigator.onLine;
    this.syncInProgress = false;
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    window.addEventListener('online', () => {
      console.log('üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      this.isOnline = true;
      this.syncPending();
    });
    
    window.addEventListener('offline', () => {
      console.log('üì¥ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
      this.isOnline = false;
    });
  }
  
  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async request(url, options = {}) {
    if (this.isOnline) {
      try {
        const response = await fetch(url, options);
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response;
      } catch (error) {
        console.warn('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ñ–ª–∞–π–Ω:', error.message);
        return this.addToPending(url, options);
      }
    } else {
      console.log('üì¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å:', url);
      return this.addToPending(url, options);
    }
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
   */
  addToPending(url, options) {
    const pendingRequest = {
      id: Date.now() + Math.random(),
      url,
      options,
      timestamp: Date.now(),
      method: options.method || 'GET'
    };
    
    this.pending.push(pendingRequest);
    this.savePending();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º "—É—Å–ø–µ—à–Ω—ã–π" –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
    return {
      ok: true,
      status: 200,
      json: async () => ({ 
        success: true, 
        offline: true, 
        message: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        pendingId: pendingRequest.id
      })
    };
  }
  
  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  async syncPending() {
    if (this.syncInProgress || this.pending.length === 0) {
      return;
    }
    
    this.syncInProgress = true;
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é ${this.pending.length} –∑–∞–ø—Ä–æ—Å–æ–≤...`);
    
    const successIds = [];
    const errors = [];
    
    for (const request of this.pending) {
      try {
        console.log(`üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º: ${request.method} ${request.url}`);
        const response = await fetch(request.url, request.options);
        
        if (response.ok) {
          successIds.push(request.id);
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${request.method} ${request.url}`);
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${request.method} ${request.url}`, error.message);
        errors.push({ request, error: error.message });
      }
    }
    
    // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    this.pending = this.pending.filter(req => !successIds.includes(req.id));
    this.savePending();
    
    this.syncInProgress = false;
    
    if (successIds.length > 0) {
      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${successIds.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      this.showNotification(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${successIds.length} –æ–ø–µ—Ä–∞—Ü–∏–π`, 'success');
    }
    
    if (errors.length > 0) {
      console.warn(`‚ö†Ô∏è ${errors.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å`);
      this.showNotification(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${errors.length} –æ–ø–µ—Ä–∞—Ü–∏–π`, 'warning');
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ localStorage
   */
  loadPending() {
    try {
      const stored = localStorage.getItem('dtj-offline-pending');
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
      return [];
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ localStorage
   */
  savePending() {
    try {
      localStorage.setItem('dtj-offline-pending', JSON.stringify(this.pending));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  showNotification(message, type = 'info') {
    // –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log(`üîî ${type.toUpperCase()}: ${message}`);
    
    // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (typeof window !== 'undefined' && window.alert) {
      // window.alert(`${type.toUpperCase()}: ${message}`);
    }
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  getPendingCount() {
    return this.pending.length;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  getSyncStatus() {
    return {
      isOnline: this.isOnline,
      pendingCount: this.pending.length,
      syncInProgress: this.syncInProgress
    };
  }
  
  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
   */
  clearPending() {
    this.pending = [];
    this.savePending();
    console.log('üóëÔ∏è –í—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—á–∏—â–µ–Ω—ã');
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const offlineAPI = new OfflineAPI();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { OfflineAPI };

